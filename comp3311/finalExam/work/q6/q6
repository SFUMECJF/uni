#!/usr/bin/python3
# COMP3311 20T2 Final Exam
# Q6: discography for one group, given by Groups.id

import sys
import psycopg2

# ... put helper functions here ...

def getGroupName(groupId, cur):
   """
   returns name of group from groupID
   """
   cur.execute("select groups.name from groups\
               where groups.id = %s" % groupId)

   return cur.fetchall()

def getAlbums(groupId, cur):
   """
   Returns a list of all albums made by groupid
   """
   cur.execute("select albums.id, albums.title, albums.year, albums.genre\
               from albums\
               where albums.made_by = %s\
               order by albums.year" % groupID)
      
   return cur.fetchall()

def getSongs(albumId, cur):
   """
   Given album id will return list of songs
   """
   cur.execute("select songs.title, songs.trackNo, songs.length\
               from songs\
               where songs.on_album = %s\
               order by songs.trackNo asc" % albumId)
   
   return cur.fetchall()

db = None
cur = None
usage = f"Usage: {sys.argv[0]} GroupID"

# process command-line args

if len(sys.argv) < 2:
   print(usage)
   exit(1)
groupID = sys.argv[1]
if not groupID.isnumeric():
   print(usage)
   exit(1)

try:
   db = psycopg2.connect("dbname=music")
   cur = db.cursor()


   albums = getAlbums(groupID, cur)
   if len(getGroupName(groupID, cur)) == 0:
      print('Invalid group ID')
      exit()
   
   print ('Discography for %s' % getGroupName(groupID, cur)[0][0])
   for album in albums:
      albumId, albumName , year, genre = album
      
      print ("--------------------")
      print ("%s (%s) (%s)" % (albumName, year, genre))
      print ("--------------------")
      for song in getSongs(albumId, cur):
         title, trackNo, length= song
         print ('%2s. %s (%s:%02d)'% (trackNo, title, int(length/60), length % 60))
      

except psycopg2.Error as err:
   print("DB error: ", err)
finally:
   if cur:
       cur.close()
   if db:
      db.close()

