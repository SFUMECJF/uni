#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... get Name's biography/filmography
# by John Dao z5258962
# November 2020 20T2

import sys
import psycopg2
#from helpers import whatever, functions, you, need
from helpers import getPeople, getRoles, getPeopleYear
# define any local helper functions here

# set up some globals

usage = "Usage: bio 'NamePattern' [Year]"
db = None
query = ''
year = ''
results = []
# process command-line args

argc = len(sys.argv)
if argc != 2 and argc != 3:
  print (usage)
  exit()
else:
  query = sys.argv[1]
  if argc == 3:
    year = sys.argv[2]

# manipulate database
try:
  db = psycopg2.connect("dbname=imdb")
  # ... add your code here ...
  if year == '':
    results = getPeople(query)
  else:
    results = getPeopleYear(query, year)

  # if there are no results
  if len(results) == 0:
    print("No name matching '%s'" % query)
  # more than one result, print list of all possible matches
  elif len(results) > 1:
    print ("Names matching '%s'" % query)
    print ('===============')
    
    # ;pp[s and prints all results for possible people in order
    for person in results:
      name, birth_year, death_year, nameID = person
      print ('%s ' % name, end='')
      if birth_year is None:
        print ('(???)')
      else:
        if death_year is None:
          print('(%s-)' % birth_year)
        else:
          print ('(%s-%s)' % (birth_year, death_year))

  # one person result. Prints all crew and acting roles
  elif len(results) == 1:
    name, birth_year, death_year, nameID = results[0]

    # filters through and prints appropriate name and birth/death dates
    print ('Filmography for %s' % name, end='')
    if birth_year is None:
        print (' (???)')
    else:
      if death_year is None:
        print(' (%s-)' % birth_year)
      else:
        print (' (%s-%s)' % (birth_year, death_year))
    print ('===============')

    # prints begining statement for first movie/role
    roles = getRoles(nameID)
    title = roles[0][0]
    print ("%s (%s)" % (title, roles[0][1]))

    # loops through and prints out individual results of search
    # filters through whether the record is a played or as
    for aRole in roles:
      curTitle, start_year, cRole, aRole, name_id, movie_id = aRole
      
      if aRole is not None:
        aRole = aRole.translate(str.maketrans({"_":" "}))
      if cRole is not None:
        cRole = cRole.translate(str.maketrans({"_":" "}))
      
      if curTitle != title:
        title = curTitle
        print ("%s (%s)" % (title, start_year))
      
      if aRole is not None:
        print (" playing %s" % aRole)
      else:
        print (" as %s" % cRole.capitalize())

except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()

