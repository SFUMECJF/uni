## Diagram
 ![](ER diagram.png)
 ![](UML Class Diagram.png)
 
## Justifications
* The first diagram is a ER diagram that drawn by our group to show the relationship between each entities clearly. That gives us a basic idea of how the databases within the slackr works.
* The second diagram is a class diagram that drawn by our group to show the relationship between each classes. That gives us an insight on how classes function together to get us an app.
* By drawing those 2 diagrams, it gives us a basic idea of priorities of implementing functions and more in-depth understanding of the project.

## Plan
* By looking the specifications as a group in group meetings, we think that Python, Flask, SQL databases, HTML, CSS and javascript are going to be useful in next few iterations.
* We plan to do 2 group meetings per week, one is in person that holds on Tuesday 6pm which is after the lab and another one is online that holds on Sunday(actual time varies).
* As we are in group of 5, and there are 5 classes shown in our diagram. Therefore everyone should be responsible for one class.
* Our online group meeting will use discord and facebook chat.
* To get started in iteration 2, we are going to do authorisation and channel in first place because other classes kind of depends on those 2 classes as you can see on our class diagram.
* Our priorities towards the all function are lists from high priority to low priority as follows: auth_register, auth_login, auth_logout, user_profile, user_profile_setname, user_profile_setemail, user_profile_sethandle, user_profile_uploadphoto, channels_create, channel_join, channel_invite, channel_leave, channel_addowner, channel_removeowner, channel_list, channel_listall, channel_messages, channel_details, message_send, message_edit, message_remove, message_react, message_pin, message_unreact, message_unpin, message_sendlater,standup_start,standup_send,search,admin_userpermission_change.
* The reason why we list priorities in this order is because first we need to have a user first, then user should finish fill up their details, next we should have a channel, and the ability of send message, finally the ability to make stand up. The main idea is to have a skeleton at first, at least make it work first and then fill with the details. Also leave the challenge functions till last to implement.

## Time line

|  Task   |       Scheduled date                |
|---------|-------------------------------------|
|Skeleton of the project|10pm Thursday 10th October  |
|Implement channel&authorisation             |10pm Thursday 17th October |
|Implement message,user_profile,standup               |4pm Sunday 20th October|
|Implement challenge functions               |4pm Friday 25th October|
|Finish backend of project and add documentations               |4pm Thursday 27th October|

## Work load

Every group member should be responsible of at least 6 hours of coding per week. If anyone in the team has personal issues, he should inform the group as soon as possible so we can discuss in the group and find a solution of that.
Also every group member would be responsible for documentations, each group member should contribute at least 1 hour per week on that.
